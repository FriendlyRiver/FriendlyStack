#!/usr/bin/perl

##FriendlyStack, a system for managing physical and electronic documents as well as photos and videos
##Copyright (C) 2018  Dimitrios F. Kallivroussis, Friendly River LLC
##
##This program is free software: you can redistribute it and/or modify
##it under the terms of the GNU Affero General Public License as
##published by the Free Software Foundation, either version 3 of the
##License, or (at your option) any later version.
##
##This program is distributed in the hope that it will be useful,
##but WITHOUT ANY WARRANTY; without even the implied warranty of
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##GNU Affero General Public License for more details.
##
##You should have received a copy of the GNU Affero General Public License
##along with this program.  If not, see <http://www.gnu.org/licenses/>.


if ( scalar @ARGV == 2 ) { print "Change Name\n"; changeUsername( $ARGV[0], $ARGV[1] ); }
elsif ( scalar @ARGV == 3 ) { print "Change Password\n"; changePassword( $ARGV[0], $ARGV[1], $ARGV[2] ); }
elsif ( scalar @ARGV == 4 ) { print "Change Name and Password\n"; }

sub changePassword {
    my ( $username, $newPassword, $oldPassword ) = @_;
#Get the salt of the current linux password in order to verify the current password provided by the user
    `cat /etc/shadow | grep "$username"` =~ /$username:((\$\d\$\w+\$)[^:]*):.*$/;
    if ($?) {
        exit(1);
    }
    else {
        if ( $1 eq crypt( $newPassword, $2 ) ) {
            `(echo "$oldPassword"; echo "$oldPassword") | smbpasswd -s -U "$username" 2>/dev/null`;
            if ( !$? ) {
                `(echo "$oldPassword") | htpasswd -i /etc/apache2/pStack.password "$username" 2>/dev/null`;
            }
            else {
                `(echo "$newPassword"; echo "$newPassword") | smbpasswd -s -U "$username" 2>/dev/null`;
                exit(1);
            }
            if ( !$? ) {
                `(echo "$oldPassword"; echo "$oldPassword") | passwd "$username" 2>/dev/null`;
            }
            else {
                `(echo "$newPassword"; echo "$newPassword") | smbpasswd -s -U "$username" 2>/dev/null`;
                `(echo "$newPassword") | htpasswd -i /etc/apache2/pStack.password "$username" 2>/dev/null`;
                exit(1);
            }
            if ( !$? ) {
                exit(0);
            }
            else {
                exit(1);
            }
        }
        else {
            exit(1);
        }
    }
}

sub changeUsername {
    my ( $oldUsername, $newUsername ) = @_;
#Don't allow any weird usernames that could break the system
    if ( $newUsername =~ /^[a-z_][a-z0-9_]{0,30}$/ ) {
#Don't allow usernames of existing users
        `id -u "$newUsername"`;
        if ( $? != 0 ) {
            `usermod -l "$newUsername" -d "/home/$newUsername" -m "$oldUsername"`;
            if ( $? == 0 ) {
                replaceUsername( "/etc/samba/smbpasswd",         $oldUsername, $newUsername );
                replaceUsername( "/etc/apache2/pStack.password", $oldUsername, $newUsername );
            }
            else {
                exit(1);
            }
        }
        else {
            exit(1);
        }
    }
    else {
        exit(1);
    }
}

sub replaceUsername {
#Replaces the username in passwd like files following the syntax username:....
    my ( $file, $oldUsername, $newUsername ) = @_;
    open( my $fh, '<:encoding(UTF-8)', "$file" );
    my @lines = <$fh>;
    close($fh);
    for ( my $i = 0, $i <= scalar @lines, ++$i ) {
        $lines[$i] =~ s/^\Q$oldUsername\E:/$newUsername:/;
    }
    open( $fh, '>:encoding(UTF-8)', "$file" );
    print $fh @lines;
    close($fh);
}
